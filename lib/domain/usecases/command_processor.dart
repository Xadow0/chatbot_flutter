import 'package:flutter/foundation.dart';

/// Tipos de comandos disponibles en el sistema
enum CommandType {
  probarPrompt, // Comando /tryprompt para evaluar y mejorar prompts
  none,        // No es un comando
}

/// Resultado del procesamiento de un comando
class CommandResult {
  final bool isCommand;
  final CommandType type;
  final String? processedMessage;
  final String? error;

  CommandResult({
    required this.isCommand,
    required this.type,
    this.processedMessage,
    this.error,
  });

  /// Constructor para cuando el mensaje NO es un comando
  factory CommandResult.notCommand() {
    return CommandResult(
      isCommand: false,
      type: CommandType.none,
    );
  }

  /// Constructor para cuando el comando se proces√≥ exitosamente
  factory CommandResult.success(CommandType type, String message) {
    return CommandResult(
      isCommand: true,
      type: type,
      processedMessage: message,
    );
  }

  /// Constructor para cuando hubo un error al procesar el comando
  factory CommandResult.error(CommandType type, String error) {
    return CommandResult(
      isCommand: true,
      type: type,
      error: error,
    );
  }
}

/// Interfaz base que todos los servicios de IA deben implementar
/// Esto permite que CommandProcessor funcione con cualquier servicio:
/// - GeminiService (a trav√©s de GeminiServiceAdapter)
/// - OpenAIService (a trav√©s de OpenAIServiceAdapter)
/// - OllamaService (a trav√©s de OllamaServiceAdapter)
/// - LocalOllamaService (a trav√©s de LocalOllamaServiceAdapter)
abstract class AIServiceBase {
  /// Genera contenido CON historial de conversaci√≥n (usado para chat normal)
  Future<String> generateContent(String prompt);
  
  /// Genera contenido SIN historial (usado para comandos como /tryprompt)
  /// Este m√©todo debe enviar SOLO el prompt sin contexto adicional
  Future<String> generateContentWithoutHistory(String prompt);
}

/// Procesador de comandos que utiliza el servicio de IA actualmente seleccionado
/// 
/// Este procesador detecta y ejecuta comandos especiales que comienzan con '/'.
/// Cada comando utiliza la IA seleccionada por el usuario (Gemini, OpenAI, Ollama, etc.)
/// para generar respuestas especializadas.
/// 
/// **Flujo de trabajo:**
/// 1. El usuario escribe un mensaje
/// 2. ChatProvider -> SendMessageUseCase -> CommandProcessor
/// 3. Si es un comando, se procesa con la IA activa SIN HISTORIAL
/// 4. Si NO es un comando, se devuelve un eco local (sin IA)
/// 
/// **IMPORTANTE:** Los comandos como /tryprompt usan `generateContentWithoutHistory`
/// para evitar que el historial de la conversaci√≥n interfiera con el an√°lisis del prompt.
class CommandProcessor {
  final AIServiceBase _aiService;

  CommandProcessor(this._aiService);

  /// Detecta si el mensaje es un comando y lo procesa
  /// 
  /// Retorna:
  /// - [CommandResult.notCommand()] si no es un comando
  /// - [CommandResult.success()] si el comando se proces√≥ correctamente
  /// - [CommandResult.error()] si hubo un error al procesar el comando
  Future<CommandResult> processMessage(String message) async {
    final normalizedMessage = message.trim().toLowerCase();

    debugPrint('üîç [CommandProcessor] Analizando mensaje...');
    debugPrint('   üìù Contenido: ${message.length > 50 ? "${message.substring(0, 50)}..." : message}');

    // Detectar comando "/tryprompt"
    if (normalizedMessage.startsWith('/tryprompt')) {
      debugPrint('   ‚úÖ Comando detectado: /tryprompt');
      return await _processProbarPrompt(message);
    }

    // TODO: Agregar m√°s comandos aqu√≠ en el futuro
    // if (normalizedMessage.startsWith('/traducir')) { ... }
    // if (normalizedMessage.startsWith('/resumir')) { ... }

    // No es un comando
    debugPrint('   ‚ÑπÔ∏è No es un comando, retornando como mensaje normal');
    return CommandResult.notCommand();
  }

  /// Procesa el comando "/tryprompt" usando la IA seleccionada SIN HISTORIAL
  /// 
  /// Este comando eval√∫a y mejora el prompt proporcionado por el usuario,
  /// utilizando la IA actualmente seleccionada (Gemini, OpenAI, Ollama, etc.)
  /// 
  /// **IMPORTANTE:** Usa `generateContentWithoutHistory` para evitar que mensajes
  /// anteriores interfieran con el an√°lisis del prompt.
  Future<CommandResult> _processProbarPrompt(String message) async {
    try {
      debugPrint('üîß [CommandProcessor] Procesando comando /tryprompt...');
      
      // Extraer el contenido despu√©s del comando
      final content = _extractContentAfterCommand(message, '/tryprompt');
      
      if (content.isEmpty) {
        debugPrint('   ‚ö†Ô∏è Comando sin contenido');
        return CommandResult.error(
          CommandType.probarPrompt,
          'Por favor, escribe algo despu√©s de "/tryprompt".\nEjemplo: /tryprompt ¬øQu√© es Flutter?',
        );
      }

      debugPrint('   üìù Contenido extra√≠do: ${content.length > 50 ? "${content.substring(0, 50)}..." : content}');
      
      // Construir el prompt especializado para evaluaci√≥n
      final enhancedPrompt = _buildEnhancedPrompt(content);
      debugPrint('   üéØ Prompt especializado creado (${enhancedPrompt.length} caracteres)');

      // Normalizar espacios antes de enviar a la IA
      final trimmedPrompt = enhancedPrompt.trim();
      
      debugPrint('   ü§ñ Enviando a la IA seleccionada SIN HISTORIAL...');
      debugPrint('   ‚ö° Usando generateContentWithoutHistory para evitar interferencia del historial');
      
      // CR√çTICO: Usar generateContentWithoutHistory para que solo se env√≠e el prompt
      // especializado sin ning√∫n mensaje anterior de la conversaci√≥n
      final response = await _aiService.generateContentWithoutHistory(trimmedPrompt);
      
      debugPrint('   ‚úÖ Respuesta recibida de la IA (${response.length} caracteres)');

      return CommandResult.success(CommandType.probarPrompt, response);
    } catch (e) {
      debugPrint('   ‚ùå Error procesando comando: $e');
      return CommandResult.error(
        CommandType.probarPrompt,
        'Error al procesar el comando: ${e.toString()}',
      );
    }
  }

  /// Extrae el contenido despu√©s del comando
  String _extractContentAfterCommand(String message, String command) {
    final startIndex = message.toLowerCase().indexOf(command.toLowerCase());
    if (startIndex == -1) return '';
    
    final contentStart = startIndex + command.length;
    return message.substring(contentStart).trim();
  }

  /// Construye el prompt especializado para evaluaci√≥n y mejora de prompts
  /// 
  /// Este prompt instruye a la IA para que analice y mejore el prompt del usuario,
  /// identificando los tres componentes clave: Task, Context y Referencias
  String _buildEnhancedPrompt(String userContent) {
    return '''
Act√∫a como un evaluador y mejorador de prompts para el prompt que adjunto como "Mensaje del usuario". No repitas tu funci√≥n ni el mensaje del usuario, c√©ntrate en mejorar el prompt. 
El usuario mandar√° un prompt para que lo eval√∫es y mejores, para cada caso, debes identificar los tres pasos que cualquier prompt deber√≠a tener:
1. Task 
2. Context
3. Referencias

Si cualquiera de las tres partes es faltante o deficiente, debes indicar al usuario como mejorarlo, haciendo las preguntas generales para que el usuario las conteste en el tema en espec√≠fico del que trate el prompt.

Estos son los pasos que debes cumplir para evaluar y mejorar el prompt:

**Instrucciones:**
1. **Identifica el objetivo principal** cu√°l es el objetivo que este prompt busca que t√∫ (la IA) cumplas.
2. **Tama√±o y complejidad del objetivo:** ¬øEs el objetivo que el prompt propone grande y complicado para la IA?  Si es as√≠, ¬øcomo desglosarlo en objetivos mas peque√±os?
3. **Estructura y expresi√≥n del prompt:** ¬øEst√° este prompt bien estructurado y expresado para lograr su objetivo de manera efectiva?    
4. **Necesidades de un prompt complejo:** Si el objetivo es grande y/o complicado, ¬øincluye este prompt un contexto completo, instrucciones claras y por pasos, ejemplos relevantes y un formato de respuesta adecuado para la IA?
5. **A√±ade una referencias adecuadas para el resultado:** ¬øQue tipo de estructura quieres que tenga la respuesta (lista, tabla, p√°rrafos)? ¬øQue tono, longitud y estilo? Es necesario un ejemplo claro de respuesta?
6. **Reescribe el prompt mejorado** incorporando todas las mejoras que hayas se√±alado. Aseg√∫rate de que el prompt resultante sea claro y completo. Proporciona este prompt mejorado en un formato markdown. Todas las partes que deban ser reemplazadas o completadas por el usuario estaran entre corchetes [].

**Restricciones:**
* Tu respuesta no debe superar los 4000 tokens.
* C√©ntrate en la explicaci√≥n de las mejoras y en la generaci√≥n del prompt mejorado, sin dar rodeos o informaci√≥n superflua en el formato de la explicaci√≥n.

**Mensaje del usuario:**
$userContent

**Fin del mensaje del usuario.**
''';
  }
}

// ============================================================================
// COMANDOS FUTUROS
// ============================================================================
// Esta secci√≥n documenta comandos que se pueden implementar en el futuro

/// Comandos adicionales que se pueden implementar en el futuro
class FutureCommands {
  // /traducir [idioma] [texto]
  // Ejemplo: /traducir ingl√©s Hola, ¬øc√≥mo est√°s?
  
  // /resumir [texto largo]
  // Ejemplo: /resumir [pegar art√≠culo largo]
  
  // /codigo [descripci√≥n]
  // Ejemplo: /codigo funci√≥n para ordenar lista de n√∫meros
  
  // /corregir [texto]
  // Ejemplo: /corregir Este es un teksto con herrores
  
  // /explicar [concepto]
  // Ejemplo: /explicar ¬øQu√© es async/await?
  
  // /comparar [opci√≥n A] vs [opci√≥n B]
  // Ejemplo: /comparar Flutter vs React Native
}